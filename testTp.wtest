import tp.*
import global.*
import wollok.game.*
import colisiones.*
import gameObjects.*
import vectores.*
import global.*



describe "Colisiones" {
	
	var pacman 
	var hitbox 

	method initialize() {
		registry.put("window_width", 1500)
		registry.put("window_height", 600)
		registry.put("casillas_pixeles", 25)
		updater.add(pacman)
		 
		pacman = new Pacman() 
		hitbox = new FrameDeColision(objetoAsociado=pacman)
		
		//hitbox.agregarPerimetro(forma, vector.at(10,10))
		pacman.frameDeColision().agregarPerimetro(
			new Rectangulo(altura=10, ancho=10), 
			vector.at(10,10)
		)
	
	}

	
	test "frameDeColision del pacman y hitbox apuntan al mismo objeto FrameDeColision" {
		assert.that(pacman.frameDeColision() === hitbox)
	}
	test "la hitbox sigue al pacman" {
		const antes = pacman.frameDeColision().perimetro().map{ ptoColision =>   
			ptoColision.position().y() 
		}
		
		pacman.arriba() // mover hacia arriba (se efectua cuando se actualiza)
		updater.updateAll() // acutalizamos todo
		updater.updateAll() // acutalizamos todo
		updater.updateAll() // acutalizamos todo
		
		const despues = pacman.frameDeColision().perimetro().map{ ptoColision =>   
			ptoColision.position().y()
		}
		
		assert.that(antes.size() == despues.size()) // asegurmaos q las listas son del mismo tamaño
		
		const tamanioLista = antes.size() - 1 
		
//		assert.that(antes.sum() > 0) // aseguramos que son todos numeros
		
		assert.that(
			(0 .. tamanioLista).all { indice =>
				antes.get(indice) < despues.get(indice) // los "y" del "antes" deberian ser de menor valor que los de "despues", xq se movió el pacman hacia arriba.  
			}
		)
	}
}


describe "vectores.wlk" {
	test "El modulo de la proyeccion de v=(1,2) sobre u=(3,5) debe ser aprox 5,814, redondeado 6" {
		const v = vector.at(1,2)
		const u = vector.at(3,5)
		
		const proy = u.escalarProyeccionSobre(v)
		
		assert.equals(6, proy.roundUp()) 
		
	}
	test "(9, 7) apunta hacia este" {
		const v = vector.at(9,7)
		assert.equals(este, v.apuntaHacia())
	}
	test "(3, 10) apunta hacia norte" {
		const v = vector.at(3,10)
		assert.equals(norte, v.apuntaHacia())
	}
	test "(3, 10) y (-1, 9) apunta hacia norte" {
		const v = vector.at(3,10)
		const u = vector.at(-1,9)
		assert.equals(norte, v.apuntaHacia())
		assert.equals(norte, u.apuntaHacia())
	}
	test "(-3, 1) y (-7, -4) apunta hacia oeste" {
		const v = vector.at(-3,1)
		const u = vector.at(-7,-4)
		assert.equals(oeste, v.apuntaHacia())
		assert.equals(oeste, u.apuntaHacia())
	}
	test "(-2, -9) y (6, -8) apunta hacia sur" {
		const v = vector.at(-2,-9)
		const u = vector.at(6,-8)
		assert.equals(sur, v.apuntaHacia())
		assert.equals(sur, u.apuntaHacia())
	}
	test "(-7, -7) apunta hacia suroeste" {
		const v = vector.at(-7,-7)
		assert.equals(suroeste, v.apuntaHacia())
	}
}



//describe "Tests en tiempo de ejecución" {
//	
//	method initialize() {
//		tpIntegrador.iniciar(1500, 600, "PAC-MAN 2") // altura y ancho (en pixeles) de la ventana, nombre de ventana, pixeles por celda
//		tpIntegrador.jugar()
//	}
//	
//	test "Test de ejemplo" {
//		assert.equals(4, 2 + 2)
//	}
//	
//	test "Pacman se mueve hacia arriba" {
//		const pacman = registry.get("pacman")
//		pacman.arriba()
//		assert.that(pacman.vel_y() > 0)
//	}
//	test "Pacman se mueve hacia la derecha" {
//		const pacman = registry.get("pacman")
//		pacman.derecha()
//		assert.that(pacman.vel_x() > 0)
//	}
//	test "Pacman se mueve hacia abajo" {
//		const pacman = registry.get("pacman")
//		pacman.abajo()
//		assert.that(pacman.vel_y() < 0)
//	}
//	
//	test "Pacman se mueve hacia la izquierda" {
//		const pacman = registry.get("pacman")
//		pacman.izquierda()
//		assert.that(pacman.vel_x() < 0)
//	}
//	
//	
//	
}